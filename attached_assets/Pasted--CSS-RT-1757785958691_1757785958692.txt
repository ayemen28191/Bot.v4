هل تستطيع التنفيذ دون الأضرار في التصميم 




نعم — يفيد جداً أن تفصل ملفات CSS الخاصة بكل اتجاه (RTL وLTR) لأسباب عديدة، لكن لديه إيجابيات وسلبيات، ويحتاج تنظيم جيد. أشرح لك متى يكون هذا مناسباً، كيف تنفّذه، وما أفضل الممارسات، ومثال عملي إن أردت.


---

المزايا والعيوب

المزايا

1. وضوح وقراءة للكود أسهل
مركز كل قواعد RTL في ملف واحد، وكل قواعد LTR في ملف آخر، يسهل صيانتها وتحديثها.


2. تحميل ملفات مخصصة فقط
إذا المستخدم يختار العربية أو لغة RTL، فقط تُحمّل ملف RTL، مما قد يقلل التحميل عند اللغات LTR والعكس، تحسين أداء.


3. تفادي تعارض القواعد
عندما تكون القواعد مختلطة قد يكون هناك تداخل أو صراع، فصل الملفات يقلل هذا الاحتمال.


4. إمكانية بناء (build) مختلف
مثلاً تستخدم أدوات مثل Sass أو Less أو RTLCSS لتحويل ملف CSS عام إلى ملف RTL تلقائياً عند البناء، أو حتى تلقائياً بناءً على اللغة.



العيوب

1. زيادة في حجم الصيانة
إذا تغيرت تصميمات LTR وRTL فقد تحتاج تغييرهما في ملفين. القضايا المشتركة قد تتكرر.


2. تكرار القواعد
الكثير من القواعد تكون متشابهة لكلا الاتجاهين؛ قد تضطر تكرارها مع تغييرات بسيطة، مما يضخم الكود.


3. تعقيد في البنية
تحتاج تنظيم جيد لتجنب تحميل ملفات غير لازم أو تكرار تحميل ولكن بدون فعالياتها.


4. إدارة التحميل حسب اللغة
تحتاج آلية في الـJS أو الـserver ليحدد اللغة ويحمّل ملف CSS المناسب. إذا تأخرت هذه العملية قد تظهر الصفحة مؤقتاً دون التنسيق الصحيح.




---

أفضل الممارسات عند فصل ملفات RTL وLTR

إليك مجموعة من النصائح لتطبيق مبدأ الفصل بشكل فعال:

استخدام أسماء ملفات واضحة مثل style.ltr.css و style.rtl.css أو main-ltr.css و main-rtl.css.

في HTML أو في جزء البداية من التطبيق، تحديد dir="ltr" أو dir="rtl" على العنصر <html> قبل تحميل التنسيق (CSS) إن أمكن، أو تحميل CSS المناسب بناءً على اللغة المحفوظة.

إذا تستخدم سكربت لتحميل CSS ديناميكياً، تأكد أن تحميل CSS يحصل بسرعة (preferably في <head>)، لكي لا تظهر الصفحة مؤقتاً بدون التنسيق الصحيح.

استخدام الخصائص المنطقية (CSS logical properties) حيثما أمكن (margin-inline-start, padding-inline-end, text-align: start/end, وغيرها) لتقليل كمية القواعد المخصصة لكل اتجاه. بهذه الطريقة، جزء كبير من CSS يكون مشترك.

إذا تستخدم أدوات مثل Sass، Less أو CSS preprocessor آخر، يمكن تنظيم الكود بحيث يكون هناك ملف مشترك يحتوي معظم القواعد، وملفات فرعية RTL وLTR تحتوي الفروقات فقط.

استخدام الأدوات التي تولد RTL تلقائياً من LTR (مثل RTLCSS) لتوفير الوقت والتقليل من التكرار. 



---

أمثلة من الممارسة + كيف تفعل هذا في مشروعك

طريقة 1: ملفات CSS منفصلة

style.ltr.css — يحتوي على التنسيق الافتراضي للغات LTR (الإنجليزية، الهندية إذا تدعم LTR).

style.rtl.css — يحتوي على الإضافات والتعديلات اللازمة للاتجاه RTL (العربية أو أي لغة RTL مثل الفارسية والعبرية).


في HTML أو في إعدادات التطبيق:

<link rel="stylesheet" href="style.common.css">  <!-- قواعد مشتركة -->
<link id="style-ltr" rel="stylesheet" href="style.ltr.css">
<link id="style-rtl" rel="stylesheet" href="style.rtl.css" disabled>

وبعد أن تختار اللغة:

function setDirection(lang) {
  const isRtl = ['ar','fa','he'].includes(lang);
  document.documentElement.setAttribute('dir', isRtl ? 'rtl' : 'ltr');

  const rtlLink = document.getElementById('style-rtl');
  const ltrLink = document.getElementById('style-ltr');

  rtlLink.disabled = !isRtl;
  ltrLink.disabled = isRtl;
}

طريقة 2: استخدام Preprocessor

لو تستخدم Sass مثلاً:

ملف مشترك _base.scss أو _common.scss يحتوي معظم القواعد التي لا تعتمد على الاتجاه.

ملف layout-ltr.scss يستورد _common.scss ويضيف تغييرات LTR.

ملف layout-rtl.scss يستورد _common.scss ويضيف تغييرات RTL، مثلاً يعكس margin-left و margin-right إلى right و left، ومثل ذلك. 


ثم عند البناء (build) تُخرّج layout.ltr.css و layout.rtl.css.


---

خلاصة: هل “يجوز”؟

نعم، يجوز تماماً، بل هو من أفضل الممارسات في المشاريع التي تدعم عدة لغات واتجاهات — خاصة إذا المشروع كبير أو عدد اللغات كبير. المهم أن تنفّذه بنظام جيد وتوازن بين ما هو مشترك وما هو مختلف.


---

إذا تحب، أقدر أرسل لك مثالًا معدّلاً لهيكل مشروعك (ملفات CSS) يتضمّن فصل RTL/LTR، مع الكود الذي تحتاجه لتحديد اللغة وتفعيل CSS الصحيح تلقائيًا — هل تريد أن أفعل ذلك؟

